{
  "active": false,
  "connections": {
    "Wait": {
      "main": [
        [
          {
            "node": "Analyze video Gemini",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download video": {
      "main": [
        [
          {
            "node": "Upload video Gemini",
            "type": "main",
            "index": 0
          },
          {
            "node": "Analyze video",
            "type": "main",
            "index": 0
          },
          {
            "node": "Transcribe video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload video Gemini": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze video Gemini": {
      "main": [
        [
          {
            "node": "Get Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Input": {
      "main": [
        [
          {
            "node": "Download video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe video": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Generate a video",
            "type": "main",
            "index": 0
          },
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        []
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "Split Out": {
      "main": [
        []
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Set Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-03T10:36:14.573Z",
  "id": "61ra6NEWNHEaY7Ng",
  "isArchived": false,
  "meta": null,
  "name": "UNIR Vídeo Analysis",
  "nodes": [
    {
      "parameters": {
        "content": "## Curación de contenidos\n\nTranscripción +  Análisis\nAvatar del profesor\nTraducción del vídeo\nClase -> contenido + transcripcion del profesor\n",
        "height": 320
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1344,
        96
      ],
      "typeVersion": 1,
      "id": "55b4388b-947d-418b-8c3c-6852a988be73",
      "name": "Sticky Note"
    },
    {
      "parameters": {},
      "id": "593d0e27-3817-4f69-960f-dd350e242b00",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [
        -192,
        528
      ],
      "webhookId": "7d0cd0c0-ce85-4372-b7a5-b0be061fc2b9",
      "typeVersion": 1.1,
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ $json.video_url }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "dec512a5-b251-4243-bbc0-29ee303cae7b",
      "name": "Download video",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -640,
        720
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/upload/v1beta/files?key=AIzaSyAcYXvtzmOwO1FAXZZiKXDu5jwr0telckE",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Goog-Upload-Command",
              "value": "start, upload, finalize"
            },
            {
              "name": "X-Goog-Upload-Header-Content-Length",
              "value": "={{ $binary.data.fileSize }}"
            },
            {
              "name": "X-Goog-Upload-Header-Content-Type",
              "value": "=video/{{ $binary.data.fileExtension }}"
            },
            {
              "name": "Content-Type",
              "value": "video/mp4"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "=data",
        "options": {}
      },
      "id": "e0c676cc-78b6-4ba7-ac83-0ca6924bf640",
      "name": "Upload video Gemini",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -416,
        528
      ],
      "typeVersion": 4.2,
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=AIzaSyAcYXvtzmOwO1FAXZZiKXDu5jwr0telckE",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"contents\": [\n        {\n            \"role\": \"user\",\n            \"parts\": [\n                {\n                    \"fileData\": {\n                        \"fileUri\": \"{{ $json.file.uri }}\",\n                        \"mimeType\": \"{{ $json.file.mimeType }}\"\n                    }\n                },\n                {\n                    \"text\": \"Describe in detail what is visually happening in the video, including key elements, actions, colors, and branding. Note the style, tone, and any notable creative techniques being used.\"\n                }\n            ]\n        }\n    ],\n    \"generationConfig\": {\n        \"temperature\": 1.4,\n        \"topK\": 40,\n        \"topP\": 0.95,\n        \"maxOutputTokens\": 8192,\n        \"responseModalities\": [\"Text\"]\n    }\n}\n",
        "options": {}
      },
      "id": "0b3ea465-7b14-41b9-8593-0f1460f2ede6",
      "name": "Analyze video Gemini",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        32,
        528
      ],
      "typeVersion": 4.2,
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6e1728e0-4749-47b9-92ae-4d1c0b7008c8",
              "name": "video_url",
              "type": "string",
              "value": "=https://storage.googleapis.com/gweb-gemini-cdn/gemini/uploads/75088d96aa687a6dedcd6e3fc4e0795c5253cad0.compressed.mp4"
            }
          ]
        },
        "options": {}
      },
      "id": "84d6eba1-c394-49ec-8956-e5037863dea7",
      "name": "Set Input",
      "type": "n8n-nodes-base.set",
      "position": [
        -864,
        720
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1ea390b9-3371-4a3a-8741-bd6ec74dc64b",
              "name": "videoDescription",
              "type": "string",
              "value": "={{ $json.candidates[0].content.parts[0].text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e1f1d4a7-9196-4076-ad8d-b3596e1243aa",
      "name": "Get Result",
      "type": "n8n-nodes-base.set",
      "position": [
        256,
        528
      ],
      "typeVersion": 3.4,
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Configuration\nDefine the video URL you want to analyze.\n",
        "height": 300,
        "width": 220,
        "color": 5
      },
      "id": "436b4732-76c8-494d-961e-030d7aee8235",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -928,
        592
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Video Processing Pipeline\n\nThis section handles the complete video processing workflow:\n\n1. DOWNLOAD: First, we fetch the video from the provided URL, converting it to binary data that Gemini can process\n\n2. UPLOAD: Next, we send the binary video data to Gemini's servers where it's stored temporarily for AI processing\n\n3. ANALYZE: Finally, we request Gemini's AI to analyze the video content. You can customize the prompt in the \"Analyze video Gemini\" node to focus on specific aspects of the video content you're interested in\n\nThe Wait node ensures the video is fully processed before analysis begins.\n",
        "height": 1276,
        "width": 1140,
        "color": 4
      },
      "id": "7f5dba09-3bde-40cf-8671-c15ec53898be",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -704,
        -16
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "text": "Please provide two things:\n\n- A brief analysis/description of what happens in the video.\n\n- A transcription of the video’s audio, just the transcription of the audio with timestamps.",
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -416,
        720
      ],
      "id": "5ff98931-ee62-4171-830c-d8ef0301108e",
      "name": "Analyze video",
      "credentials": {
        "googlePalmApi": {
          "id": "X30UB2LkpOZovf9c",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "text": "Please provide the analysis in this JSON format:\n{\n  \"title\": \"string - title of the video content\",\n  \"description\": \"string - brief description of the video content\",\n  \"timeline\": [\n    {\n      \"time\": number (seconds),\n      \"title\": \"string - descriptive title with emoji if appropriate\",\n      \"description\": \"string - detailed description of what happens at this moment\"\n    }\n  ]\n}\n\nRequirements:\n- Use \"time\" in seconds (not HH:MM:SS format)\n- Include relevant emojis in titles for visual appeal\n- Provide detailed descriptions for each timeline point\n- Ensure chronological order of timeline points\n- Make titles descriptive and engaging\n- Keep descriptions concise but informative\n- The title and descriptions must be in spanish\n- Don´t include emojis anywhere",
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -416,
        912
      ],
      "id": "b50ed259-0731-4208-b3ff-2d190e51aded",
      "name": "Transcribe video",
      "credentials": {
        "googlePalmApi": {
          "id": "X30UB2LkpOZovf9c",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n  // El input es directamente el array\n  const items = $input.all();\n  \n  // Acceder al texto del primer item\n  const text = items[0].json.content.parts[0].text;\n  \n  // Limpiar y parsear\n  const jsonMatch = text.match(/```json\\n([\\s\\S]*?)\\n```/);\n  \n  if (jsonMatch && jsonMatch[1]) {\n    const parsed = JSON.parse(jsonMatch[1]);\n    \n    // Validar que tenga las 3 propiedades esperadas para el nuevo formato\n    if (!parsed.title || !parsed.description || !parsed.timeline) {\n      throw new Error('El JSON no contiene todas las propiedades esperadas (title, description, timeline)');\n    }\n    \n    // Validar que timeline sea un array\n    if (!Array.isArray(parsed.timeline)) {\n      throw new Error('La propiedad timeline debe ser un array');\n    }\n    \n    // Validar que cada item del timeline tenga las propiedades requeridas\n    for (let i = 0; i < parsed.timeline.length; i++) {\n      const item = parsed.timeline[i];\n      if (!item.time && item.time !== 0) {\n        throw new Error(`El item ${i} del timeline no tiene la propiedad 'time'`);\n      }\n      if (!item.title) {\n        throw new Error(`El item ${i} del timeline no tiene la propiedad 'title'`);\n      }\n      if (!item.description) {\n        throw new Error(`El item ${i} del timeline no tiene la propiedad 'description'`);\n      }\n    }\n    \n    return [{ json: parsed }];\n  }\n  \n  throw new Error('No se encontró JSON válido');\n} catch (error) {\n  throw new Error(`Error parseando JSON: ${error.message}`);\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        912
      ],
      "id": "76871a17-76c6-4c1b-b661-498f28763e29",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "resource": "video",
        "modelId": {
          "__rl": true,
          "value": "models/veo-3.0-generate-001",
          "mode": "list",
          "cachedResultName": "models/veo-3.0-generate-001"
        },
        "prompt": "=Recreate this video:\n {{ $json.video_description }}\n{{ $json.scene_by_scene_analysis }}\n{{ $json.audio_transcription }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        32,
        720
      ],
      "id": "3cd45149-6e0a-4a16-a7ad-8d92aec52fb1",
      "name": "Generate a video",
      "credentials": {
        "googlePalmApi": {
          "id": "X30UB2LkpOZovf9c",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "8dab7c35-c207-4269-b4a7-5dfb4525b194",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1184,
        720
      ],
      "id": "12b89205-8976-40fa-a7ec-a42d986b1733",
      "name": "Webhook",
      "webhookId": "8dab7c35-c207-4269-b4a7-5dfb4525b194"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json | toJson }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        32,
        1104
      ],
      "id": "54ea525e-72a5-4d77-a84a-b0ad80a6cacc",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "fieldToSplitOut": "timeline",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        32,
        912
      ],
      "id": "303a41eb-5f43-459a-80ce-fa70f41969f6",
      "name": "Split Out"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1104,
        576
      ],
      "id": "75b4b5be-b5b8-44cc-9e36-5e812c3c51eb",
      "name": "When clicking ‘Execute workflow’"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-03T10:36:14.579Z",
      "updatedAt": "2025-10-03T10:36:14.579Z",
      "role": "workflow:owner",
      "workflowId": "61ra6NEWNHEaY7Ng",
      "projectId": "k1NZeG3qHb8L8scP"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-21T13:27:38.000Z",
  "versionId": "66a8ad11-3596-40a3-be32-e2bf597b7bb5"
}