{
  "active": false,
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Get All Workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule": {
      "main": [
        [
          {
            "node": "Get All Workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Get All Workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Workflows": {
      "main": [
        [
          {
            "node": "Set Global Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Global Variables": {
      "main": [
        [
          {
            "node": "Check Existing File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Compare Workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Existing File": {
      "main": [
        [
          {
            "node": "File Exists Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Exists Check": {
      "main": [
        [
          {
            "node": "Download Existing File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Existing File": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Compare Workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Workflows": {
      "main": [
        [
          {
            "node": "Route by Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Status": {
      "main": [
        [
          {
            "node": "No Changes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Existing Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create New Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Changes": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Existing Workflow": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Workflow": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-24T09:32:05.738Z",
  "id": "0nPsWrRrCM1sYnKT",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "n8n Backup to GitHub - Mejorado",
  "nodes": [
    {
      "parameters": {},
      "id": "176048f7-b82f-4596-b8c4-aed0bd45425c",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -192,
        -112
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 7
            }
          ]
        }
      },
      "id": "956a42e2-bfe9-401f-b773-f94f78036055",
      "name": "Daily Schedule",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -192,
        0
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook-backup",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "1f542165-71cd-4eee-b55f-bc0f234efed0",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -192,
        128
      ],
      "typeVersion": 1.1,
      "webhookId": "backup-webhook-id"
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "7c083fa4-5f4e-41ed-8204-a7cb5a716925",
      "name": "Get All Workflows",
      "type": "n8n-nodes-base.n8n",
      "position": [
        16,
        -32
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "Rkr233UNCAfkxrec",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "devidbarreiro"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "n8n-backup"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "workflow_folder",
              "type": "string",
              "value": "={{ $json.name.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-').toLowerCase() }}"
            },
            {
              "id": "new-assignment-1",
              "name": "file_name",
              "type": "string",
              "value": "={{ $json.name.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-').toLowerCase() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "237fee99-c37a-4126-871c-afb3a9cbb62b",
      "name": "Set Global Variables",
      "type": "n8n-nodes-base.set",
      "position": [
        208,
        -32
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.name }}"
        },
        "filePath": "={{ $json.workflow_folder }}/{{ $json.file_name }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "a907303b-fb57-4fe0-ac2e-cf677c9512c9",
      "name": "Check Existing File",
      "type": "n8n-nodes-base.github",
      "position": [
        416,
        -32
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "48f8ba7c-106c-4a27-898a-bfa7ef4e72f9",
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "error-check-condition",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "692f56de-fdd0-4376-adfb-e8a11785f41d",
      "name": "File Exists Check",
      "type": "n8n-nodes-base.if",
      "position": [
        608,
        -32
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "4b8b6731-75c1-4168-be73-b121bcd70304",
      "name": "Download Existing File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        816,
        -112
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {},
      "id": "a5ef388b-592f-4733-a467-36ff5089fdfb",
      "name": "Merge Data",
      "type": "n8n-nodes-base.merge",
      "position": [
        1008,
        -32
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los items de entrada\nconst allInputs = $input.all();\nconsole.log('Total inputs received:', allInputs.length);\n\nif (allInputs.length === 0) {\n  throw new Error('No input data received');\n}\n\n// Función para ordenar JSON de forma consistente\nconst orderJsonKeys = (jsonObj) => {\n  if (typeof jsonObj !== 'object' || jsonObj === null || Array.isArray(jsonObj)) {\n    return jsonObj;\n  }\n  \n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    if (typeof jsonObj[key] === 'object' && jsonObj[key] !== null && !Array.isArray(jsonObj[key])) {\n      ordered[key] = orderJsonKeys(jsonObj[key]);\n    } else {\n      ordered[key] = jsonObj[key];\n    }\n  });\n  return ordered;\n}\n\n// Función para limpiar workflow eliminando info sensible\nconst cleanWorkflow = (workflow) => {\n  const cleaned = {\n    name: workflow.name,\n    nodes: workflow.nodes,\n    connections: workflow.connections,\n    settings: workflow.settings || {},\n    pinData: workflow.pinData || {},\n    tags: workflow.tags || [],\n    active: workflow.active\n  };\n  \n  // Limpiar credenciales de los nodos\n  if (cleaned.nodes) {\n    cleaned.nodes = cleaned.nodes.map(node => {\n      const cleanedNode = { ...node };\n      if (cleanedNode.credentials) {\n        // Mantener estructura pero remover IDs sensibles\n        Object.keys(cleanedNode.credentials).forEach(credType => {\n          cleanedNode.credentials[credType] = {\n            name: cleanedNode.credentials[credType].name || 'credential'\n          };\n        });\n      }\n      return cleanedNode;\n    });\n  }\n  \n  return cleaned;\n};\n\n// Procesar cada item\nconst results = [];\n\nfor (let i = 0; i < allInputs.length; i++) {\n  const item = allInputs[i];\n  console.log(`Processing item ${i}:`, Object.keys(item.json));\n  \n  // Identificar si es un workflow de n8n (tiene nodes y connections)\n  if (item.json.nodes && item.json.connections) {\n    // Este es el workflow actual de n8n\n    const currentWorkflow = item.json;\n    \n    // Limpiar el workflow\n    const cleanedWorkflow = cleanWorkflow(currentWorkflow);\n    \n    // Ordenar JSON para comparación consistente\n    const orderedCurrentWorkflow = orderJsonKeys(cleanedWorkflow);\n    const currentWorkflowString = JSON.stringify(orderedCurrentWorkflow, null, 2);\n    \n    // Crear resultado base\n    const result = {\n      workflow_name: currentWorkflow.name,\n      workflow_id: currentWorkflow.id,\n      new_content: currentWorkflowString,\n      status: \"new\", // Por defecto nuevo\n      folder_name: currentWorkflow.name.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-').toLowerCase(),\n      file_name: currentWorkflow.name.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-').toLowerCase()\n    };\n    \n    // Buscar si hay datos de GitHub correspondientes en otros items\n    const githubItem = allInputs.find(input => \n      input.json.workflow_folder && \n      !input.json.nodes && \n      !input.json.connections &&\n      input.json.workflow_folder === result.folder_name\n    );\n    \n    if (githubItem && !githubItem.json.error && githubItem.json.content) {\n      try {\n        // Decodificar archivo existente\n        const existingWorkflowRaw = JSON.parse(Buffer.from(githubItem.json.content, 'base64').toString());\n        const existingWorkflow = cleanWorkflow(existingWorkflowRaw);\n        const orderedExistingWorkflow = orderJsonKeys(existingWorkflow);\n        const existingWorkflowString = JSON.stringify(orderedExistingWorkflow, null, 2);\n        \n        if (currentWorkflowString === existingWorkflowString) {\n          result.status = \"unchanged\";\n        } else {\n          result.status = \"changed\";\n          result.changes_detected = true;\n        }\n        \n        console.log(`Workflow ${result.workflow_name}: ${result.status}`);\n      } catch (error) {\n        console.log('Error parsing existing file for', result.workflow_name, ':', error.message);\n        result.status = \"changed\";\n        result.parse_error = true;\n      }\n    } else {\n      console.log(`No existing file found for workflow: ${result.workflow_name}`);\n    }\n    \n    results.push(result);\n  }\n}\n\nconsole.log(`Returning ${results.length} workflow results`);\nreturn results.map(result => ({ json: result }));"
      },
      "id": "467ccb50-be15-4f07-88a7-08528bc21995",
      "name": "Compare Workflows",
      "type": "n8n-nodes-base.code",
      "position": [
        1216,
        -32
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.status }}",
        "rules": {
          "rules": [
            {
              "value2": "unchanged"
            },
            {
              "value2": "changed",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "569d5771-cb14-4fae-ab47-a083c0d6f87e",
      "name": "Route by Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1408,
        -32
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "97e0e382-a305-476b-8abc-c42f0fbc272a",
      "name": "No Changes",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1616,
        -160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Set Global Variables').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Set Global Variables').item.json.repo.name }}"
        },
        "filePath": "={{ $json.folder_name }}/{{ $json.file_name }}.json",
        "fileContent": "={{ $json.new_content }}",
        "commitMessage": "🔄 Update workflow: {{ $json.workflow_name }}"
      },
      "id": "65640114-3fe6-4a4a-b7d9-15da2e229e8e",
      "name": "Update Existing Workflow",
      "type": "n8n-nodes-base.github",
      "position": [
        1616,
        -32
      ],
      "typeVersion": 1,
      "webhookId": "a3a22679-a1bb-455b-b23e-3d79ef0d6a0c"
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Set Global Variables').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Set Global Variables').item.json.repo.name }}"
        },
        "filePath": "={{ $json.folder_name }}/{{ $json.file_name }}.json",
        "fileContent": "={{ $json.new_content }}",
        "commitMessage": "✨ Add new workflow: {{ $json.workflow_name }}"
      },
      "id": "e2dead7a-9cdf-4796-9bf2-dde8795b113b",
      "name": "Create New Workflow",
      "type": "n8n-nodes-base.github",
      "position": [
        1616,
        80
      ],
      "typeVersion": 1,
      "webhookId": "ae228407-4168-4191-8b5a-28607383ea90"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Backup process completed\",\n  \"timestamp\": $now,\n  \"processed_workflows\": $runIndex\n} }}",
        "options": {}
      },
      "id": "388d62dc-2584-4652-b7dc-601069f00c77",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        1808,
        128
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 📋 n8n Workflows Backup to GitHub\n\nEste workflow sincroniza automáticamente tus workflows de n8n con un repositorio de GitHub, organizando cada workflow en su propia carpeta.\n\n### 🏗️ Estructura de archivos:\n- **Carpeta por workflow**: Cada workflow tiene su propia carpeta\n- **Nombre consistente**: La carpeta y el archivo tienen el mismo nombre\n- **Formato**: `nombre-del-workflow/nombre-del-workflow.json`\n- **Limpieza**: Se eliminan credenciales sensibles automáticamente\n\n### ⚙️ Configuración requerida:\n1. **Credenciales n8n API**: Para obtener los workflows\n2. **Credenciales GitHub API**: Para subir al repositorio\n3. **Variables en 'Set Global Variables'**:\n   - `repo.owner`: tu usuario de GitHub\n   - `repo.name`: nombre del repositorio\n\n### 🚀 Triggers disponibles:\n- **Manual**: Ejecutar cuando quieras\n- **Programado**: Todos los días a las 7:00 AM\n- **Webhook**: Para ejecutar cuando cambies workflows\n  \n### 📡 Webhook URL:\n`https://tu-n8n.com/webhook/webhook-backup`\n\n### ✨ Características:\n- ✅ Detecta cambios inteligentemente\n- ✅ Solo actualiza workflows modificados\n- ✅ Estructura organizada por carpetas\n- ✅ Limpieza automática de datos sensibles\n- ✅ Mensajes de commit descriptivos\n- ✅ Manejo de errores robusto",
        "height": 520,
        "width": 380,
        "color": 4
      },
      "id": "9b0b675e-4238-490f-829d-0f9d8e50c3b9",
      "name": "📖 Documentación",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -880,
        -336
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ⚠️ Configurar aquí\n\nEdita las variables:\n- repo.owner\n- repo.name\n\nY configura tus credenciales de GitHub y n8n API",
        "width": 200,
        "color": 3
      },
      "id": "164220b9-9140-4c79-a61f-51a3db8bf11c",
      "name": "🔧 Config",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        192,
        -160
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-24T09:32:05.750Z",
      "updatedAt": "2025-09-24T09:32:05.750Z",
      "role": "workflow:owner",
      "workflowId": "0nPsWrRrCM1sYnKT",
      "projectId": "k1NZeG3qHb8L8scP"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-24T09:44:09.000Z",
  "versionId": "65f2aa42-9399-4bcf-9cdb-bc272b11b981"
}